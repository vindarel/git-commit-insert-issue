[[http://melpa.org/#/git-commit-insert-issue][file:http://melpa.org/packages/git-commit-insert-issue-badge.svg]]

* Search and insert the right issue at "Fixes #"

Goal: In a magit commit buffer, I want to complete the issue when I type
"Fixes #".

For Github and Gitlab.


#+BEGIN_HTML
 <img src="https://gitlab.com/emacs-stuff/git-commit-insert-issue/raw/master/img.png" </img>
#+END_HTML
# https://cloud.githubusercontent.com/assets/5016978/6471672/e36e8c00-c1a1-11e4-91a1-dd5481d57c36.png

** Usage
Activate the minor mode
: M-x git-commit-insert-issue-mode

In a magit  commit buffer (=git-commit-mode=), type "Fixes  #" (or [[https://help.github.com/articles/closing-issues-via-commit-messages/][any
other keyword understood by github]], or just a "#" for Gitlab) and choose
the issue from the list.

So to always activate it:
: (add-hook 'git-commit-mode-hook 'git-commit-insert-issue-mode)

You can also call it with
: M-x git-commit-insert-issue-ask-issues

and programmatically doing something like
#+BEGIN_SRC emacs-lisp
(--map (insert (concat it "\n"))
       (git-commit-insert-issue-github-issues-format "inkel" "github-issues.el"))
#+END_SRC

*** Connect to your Gitlab account
Don't forget to set your Gitlab credentials:
#+BEGIN_SRC emacs-lisp
(setq gitlab-host "https://gitlab.com"
      gitlab-username "foo"
      gitlab-password "password")
#+END_SRC
normally you would then call =M-x gitlab-login=, but the lib does it when needed.

** Installation

This package is in [[http://wikemacs.org/wiki/MELPA][MELPA]], so you can install it with [[http://wikemacs.org/wiki/Package.el][package.el]]:

: M-x package-install RET git-commit-insert-issue RET

(you may need a =M-x package-refresh-contents=).

Alternatively, you can download this  repo and call =M-x load-file= on the
elisp source.

*** Dependencies

- [[https://github.com/inkel/github-issues.el][github-issues]]
- helm
- projectile
- s.el
- [[https://github.com/nlamirault/emacs-gitlab][emacs-gitlab]] (see also [[https://gitlab.com/tarsius/glab][glab.el]], by Tarsius, Emacs 25 only)

They are all in MELPA.

** Issues

- the [[https://gitlab.com/emacs-stuff/git-commit-insert-issue/issues/5][helm integration is broken]], we then simply use ido.
- if you play too much with it, you can reach github's rate limit.

[[https://github.com/inkel/github-issues.el/issues][Issues for github integration of github-issues.el]] :

# export: both uses an org table with many columns. Eval with C-c-c or
# execute the line with C-x-e
#+BEGIN_SRC emacs-lisp
(--map (insert (concat it "\n")) (git-commit-insert-issue-github-issues-format "inkel" "github-issues.el"))
#10 - Why not just use the gh package?
#1 - Doesn't work on private repos.
#+END_SRC


#+BEGIN_SRC emacs-lisp :exports none
;;(issues-get-issues "inkel" "github-issues.el")
#+END_SRC


** Todo

- tests
- cache
- [X] gitlab integration:
  - [X] Get opened issues from gitlab
  - [X] Get a list of strings with "id - title"
  - [X] choose with ido and insert in buffer: =M-x git-commit-insert-issue-gitlab-insert=.
  - [X] choose github or gitlab, depending on project.
    - [X] get the remote server in git config
  - [X]  make it work for  projects in groups (i.e,  "emacs-stuff/project" and
    not "vindarel".
    - [X] get the group name in git config
  - [Â±] error handling (bad project name, etc)
